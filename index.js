// Generated by LiveScript 1.2.0
var _, toString$ = {}.toString;
_ = require('prelude-ls');
_.regexMatches = function(regex, str){
  return str.match(regex) || [];
};
_.regexExec = function(regex, str, key){
  var tmp, results$ = [];
  key == null && (key = null);
  while (tmp = regex.exec(str)) {
    if (key != null) {
      results$.push(tmp[key]);
    } else {
      results$.push(tmp);
    }
  }
  return results$;
};
_.clone = function(it){
  return it.slice(0);
};
_.get2D = function(i, width){
  return [i % width, Math.floor(i / width)];
};
_.get1D = function(x, y, width){
  return x + y * width;
};
_.shuffle = function(arr){
  var j, x, i;
  j = x = i = arr.length;
  while (i) {
    j = Math.floor(Math.random() * i);
    x = arr[--i];
    arr[i] = arr[j];
    arr[j] = x;
  }
  return arr;
};
_.where = function(query, arr){
  var test, i$, len$, a, results$ = [];
  test = function(it){
    var k, ref$, v;
    for (k in ref$ = query) {
      v = ref$[k];
      if (it[k] !== v) {
        return false;
      }
    }
    return true;
  };
  for (i$ = 0, len$ = arr.length; i$ < len$; ++i$) {
    a = arr[i$];
    if (test(a)) {
      results$.push(a);
    }
  }
  return results$;
};
_.batch = function(count, list){
  var results$ = [];
  count = Number(count);
  if (count < 1) {
    return [];
  }
  list = list.slice(0);
  while (list.length) {
    results$.push(list.splice(0, count));
  }
  return results$;
};
_.variance = function(it){
  var avg, sum, i$, len$, v, x;
  avg = _.mean(it);
  sum = 0;
  for (i$ = 0, len$ = it.length; i$ < len$; ++i$) {
    v = it[i$];
    x = v - avg;
    sum += x * x;
  }
  return sum / it.length;
};
_.stdDeviation = function(it){
  return Math.sqrt(_.variance(it));
};
_.outsideStdDeviation = function(a, m){
  var avg, dev, i$, len$, v, results$ = [];
  m == null && (m = 1);
  avg = _.mean(a);
  dev = _.stdDeviation(a);
  for (i$ = 0, len$ = a.length; i$ < len$; ++i$) {
    v = a[i$];
    if (Math.abs(v - avg) > dev * m) {
      results$.push(v);
    }
  }
  return results$;
};
_.outsideStdDeviationBy = function(f, a, m){
  var values, avg, dev, i$, len$, k, v, results$ = [];
  m == null && (m = 1);
  values = _.map(f)(
  a);
  avg = _.mean(values);
  dev = _.stdDeviation(values);
  for (i$ = 0, len$ = a.length; i$ < len$; ++i$) {
    k = i$;
    v = a[i$];
    if (Math.abs(values[k] - avg) > dev * m) {
      results$.push(v);
    }
  }
  return results$;
};
_.indexBy = function(f, item){
  var list, target, k, v, i$, len$;
  if (toString$.call(item).slice(8, -1) === 'Object') {
    list = _.values(item);
    target = f(list);
    for (k in item) {
      v = item[k];
      if (v === target) {
        return k;
      }
    }
  } else {
    target = f(item);
    for (i$ = 0, len$ = item.length; i$ < len$; ++i$) {
      k = i$;
      v = item[i$];
      if (v === target) {
        return k;
      }
    }
  }
};
_.rand = function(min, max){
  var ref$;
  max == null && (max = null);
  if (max == null) {
    ref$ = [0, min], min = ref$[0], max = ref$[1];
  }
  return Math.floor(Math.random() * (max - min + 1) + min);
};
_.chance = function(num){
  num == null && (num = 0.5);
  return Math.random() < num;
};
_.negateIf = function(b, x){
  if (b) {
    return -x;
  } else {
    return x;
  }
};
_.chr = function(int){
  return String.fromCharCode(int);
};
_.ord = function(str){
  return str.charCodeAt(0);
};
_.isInsensitive = function(a, b){
  if (toString$.call(a).slice(8, -1) !== 'String' || toString$.call(b).slice(8, -1) !== 'String') {
    return false;
  }
  return a.toUpperCase() === b.toUpperCase();
};
_.inInsensitive = function(a, arr){
  var i$, len$, v;
  if (toString$.call(a).slice(8, -1) !== 'String') {
    return false;
  }
  a = a.toUpperCase();
  for (i$ = 0, len$ = arr.length; i$ < len$; ++i$) {
    v = arr[i$];
    if (v.toUpperCase() === a) {
      return true;
    }
  }
  return false;
};
_.compareArray = function(a, b){
  var i$, len$, k;
  if (a.length !== b.length) {
    return false;
  }
  for (i$ = 0, len$ = a.length; i$ < len$; ++i$) {
    k = i$;
    if (a[k] !== b[k]) {
      return false;
    }
  }
  return true;
};
_.capitalize = function(str){
  return str.substr(0, 1).toUpperCase() + str.substr(1);
};
_.isArray = function(it){
  return toString$.call(it).slice(8, -1) === 'Array';
};
_.boolToInt = function(b){
  if (b) {
    return 1;
  } else {
    return 0;
  }
};
_.flipEach = _.flip(_.each);
_.flipMap = _.flip(_.map);
_.flipReject = _.flip(_.reject);
_.flipFilter = _.flip(_.filter);
_.flipSetTimeout = _.flip(_.setTimeout);
_.regexMatch = function(regex, str){
  return str.match(regex) || [];
};
module.exports = _;