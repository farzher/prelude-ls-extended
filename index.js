// Generated by LiveScript 1.2.0
var _, Url;
_ = require('prelude-ls');
Url = require('url');
_.urlResolve = function(){
  return Url.resolve.apply(this, arguments);
};
_.urlParse = function(it){
  return Url.parse(it, false, true);
};
_.parsedToUri = function(it){
  return it.path + (it.hash || '');
};
_.urlToUri = function(){
  return _.parsedToUri(_.urlParse.apply(this, arguments));
};
_.regexMatch = curry$(function(regex, str){
  return str.match(regex) || [];
});
_.regexExec = function(regex, str, key){
  var results, tmp;
  key == null && (key = null);
  results = [];
  while (tmp = regex.exec(str)) {
    results.push(key != null ? tmp[key] : tmp);
  }
  return results;
};
_.uniqueBy = curry$(function(func, list){
  var seen, i$, len$, item, value, results$ = [];
  seen = [];
  for (i$ = 0, len$ = list.length; i$ < len$; ++i$) {
    item = list[i$];
    value = func(item);
    if (in$(value, seen)) {
      continue;
    }
    seen.push(value);
    results$.push(item);
  }
  return results$;
});
_.dbBool = function(v){
  if (v) {
    return 1;
  } else {
    return 0;
  }
};
_.rand = function(min, max){
  var ref$;
  max == null && (max = null);
  if (max == null) {
    ref$ = [0, min], min = ref$[0], max = ref$[1];
  }
  return Math.floor(Math.random() * (max - min + 1) + min);
};
_.chance = function(f){
  f == null && (f = 0.5);
  return Math.random() < f;
};
_.chr = function(n){
  return String.fromCharCode(n);
};
_.ord = function(c){
  return c.charCodeAt(0);
};
_.flipEach = _.flip(_.each);
_.flipMap = _.flip(_.map);
_.flipReject = _.flip(_.reject);
_.flipFilter = _.flip(_.filter);
_.flipSetTimeout = _.flip(_.setTimeout);
module.exports = _;
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}