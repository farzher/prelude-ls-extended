// Generated by LiveScript 1.2.0
var _, Url;
_ = require('prelude-ls');
Url = require('url');
_.urlResolve = function(){
  return Url.resolve.apply(this, arguments);
};
_.urlParse = function(url){
  return Url.parse(url, false, true);
};
_.parsedToUri = function(parsed){
  return parsed.path + (parsed.hash || '');
};
_.urlToUri = function(){
  return _.parsedToUri(_.urlParse.apply(this, arguments));
};
_.regexMatch = curry$(function(regex, str){
  return str.match(regex) || [];
});
_.regexExec = function(regex, str, key){
  var results, tmp;
  key == null && (key = null);
  results = [];
  while (tmp = regex.exec(str)) {
    results.push(key != null ? tmp[key] : tmp);
  }
  return results;
};
_.indexBy = function(f, item){
  var list, index;
  if (_.isType('Object', item)) {
    list = _.values(item);
    index = _.elemIndex(f(list), list);
    return _.keys(item)[index];
  } else {
    return _.elemIndex(f(item), item);
  }
};
_.rand = function(min, max){
  var ref$;
  max == null && (max = null);
  if (max == null) {
    ref$ = [0, min], min = ref$[0], max = ref$[1];
  }
  return Math.floor(Math.random() * (max - min + 1) + min);
};
_.chance = function(num){
  num == null && (num = 0.5);
  return Math.random() < num;
};
_.negateIf = function(b, x){
  if (b) {
    return -x;
  } else {
    return x;
  }
};
_.chr = function(int){
  return String.fromCharCode(int);
};
_.ord = function(str){
  return str.charCodeAt(0);
};
_.isInsensitive = function(a, b){
  return a.toUpperCase() === b.toUpperCase();
};
_.capitalize = function(str){
  return str.substr(0, 1).toUpperCase() + str.substr(1);
};
_.dbBool = function(val){
  if (val) {
    return 1;
  } else {
    return 0;
  }
};
_.isArray = _.isType('Array');
_.flipEach = _.flip(_.each);
_.flipMap = _.flip(_.map);
_.flipReject = _.flip(_.reject);
_.flipFilter = _.flip(_.filter);
_.flipSetTimeout = _.flip(_.setTimeout);
module.exports = _;
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}