// Generated by LiveScript 1.2.0
var _;
_ = require('../index.js');
exports.regexMatch = function(it){
  it.strictEqual(_.regexMatch(/a/g, 'ababab').length, 3);
  it.strictEqual(_.regexMatch(/does not exist/, 'ababab').length, 0);
  return it.done();
};
exports.regexExec = function(it){
  var temp;
  temp = _.regexExec(/a(b)/g, 'ababab');
  it.strictEqual(temp.length, 3);
  it.strictEqual(temp[2][0], 'ab');
  it.strictEqual(temp[2][1], 'b');
  temp = _.regexExec(/href="(.*?)"/g, '<a id="pants" href="something.com">lol</a>', 1);
  it.strictEqual(temp[0], 'something.com');
  return it.done();
};
exports.clone = function(it){
  var a, b, i$, to$, i, temp;
  a = [
    1, 2, 3, 'a', 'b', 'c', {
      a: 1
    }, [1, 2]
  ];
  b = _.clone(a);
  for (i$ = 0, to$ = a.length; i$ < to$; ++i$) {
    i = i$;
    it.strictEqual(a[i], b[i], 'Every element in each array should be the same');
  }
  temp = a[0];
  b[0] = 'x';
  it.strictEqual(a[0], temp, 'Changing cloned array should not affect original');
  temp = b[0];
  a[0] = 'z';
  it.strictEqual(b[0], temp, 'Changing original array should not affect cloned');
  return it.done();
};
exports.shuffle = function(it){
  var arr, shuffled, i$, len$, v, index;
  arr = [1, 2, 3, 'a', 'b', 'c'];
  shuffled = _.shuffle(_.clone(arr));
  it.strictEqual(arr.length, shuffled.length, 'Length of shuffled array should be the same');
  for (i$ = 0, len$ = arr.length; i$ < len$; ++i$) {
    v = arr[i$];
    index = _.elemIndex(v, shuffled);
    it.ok(index != null, 'Every element in the original array should be in the shuffled array');
  }
  it.strictEqual(_.shuffle([]).length, 0, 'Shuffling an empty array should not cause a problem');
  return it.done();
};
exports.indexBy = function(it){
  var list, obj;
  list = [1, 9, 3];
  it.strictEqual(_.indexBy(_.maximum, list), 1, 'Index of highest number is 1');
  obj = {
    butts: 1,
    cats: 9,
    rocks: 3
  };
  it.strictEqual(_.indexBy(_.minimum, obj), 'butts', 'Index of lowest number is butts');
  return it.done();
};
exports.where = function(it){
  var list;
  list = [
    {
      a: 1,
      b: 2,
      c: 3,
      same: true
    }, {
      a: 4,
      b: 5,
      c: 6,
      same: true
    }
  ];
  it.strictEqual(_.where({
    a: 1
  }, list)[0], list[0]);
  it.strictEqual(_.where({
    c: 6,
    b: 5
  }, list)[0], list[1], 'Can find by multiple params');
  it.strictEqual(_.where({
    c: 6,
    b: 1
  }, list).length, 0, 'All must be true');
  it.strictEqual(_.where({
    same: true
  }, list).length, 2, 'Returns a list of all matches');
  it.strictEqual(_.where({
    none: [{}]
  }, list).length, 0, 'Using unknown keys returns nothing');
  return it.done();
};
exports.batch = function(it){
  var list;
  list = [
    'start', 1, 'a', {
      stuff: 'things'
    }, 2, 3, 1, 8, 3, 7, [2, 3], {}, [], 'end'
  ];
  it.strictEqual(_.batch(3, list)[1][0].stuff, 'things');
  it.strictEqual(_.batch(2, list).length, list.length / 2);
  it.strictEqual(_.batch(1, list).length, list.length);
  it.strictEqual(_.batch(list.length, list).length, 1);
  it.strictEqual(_.batch('-1', list).length, 0, 'Batching by a broken amount should return []');
  return it.done();
};